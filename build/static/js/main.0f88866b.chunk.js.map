{"version":3,"sources":["Login.js","Notifications.js","App.js","serviceWorker.js","index.js"],"names":["Login","props","state","username","event","this","title","hintText","floatingLabelText","onChange","newValue","setState","label","href","primary","style","onClick","handleClick","Component","Notifications","notifications","notifier","message","room","add_notif","bind","notify","socket","io","connect","emit","match","params","on","notif","requestOptions","method","headers","body","JSON","stringify","fetch","newmessage","newroom","Col","refresh_room","refresh_message","Object","keys","map","notification","Row","value","Toast","onClose","remove_notif","show","animation","Header","src","className","alt","Body","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.0f88866b.chunk.js","sourcesContent":["import React, { Component, style } from \"react\";\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport AppBar from 'material-ui/AppBar';\nimport RaisedButton from 'material-ui/RaisedButton';\nimport TextField from 'material-ui/TextField';\n\nclass Login extends Component {\nconstructor(props){\n  super(props);\n  this.state={\n  username:'',\n  }\n }\n\nhandleClick(event){\n var payload={\n \"username\":this.state.username}\n}\n\nrender() {\n    return (\n      <div>\n        <MuiThemeProvider>\n            <div>\n            <AppBar\n               title=\"Login\"\n             />\n             <TextField\n               hintText=\"Enter your Username\"\n               floatingLabelText=\"Username\"\n               onChange = {(event,newValue) => this.setState({username:newValue})}\n               />\n               <RaisedButton label=\"Submit\"\n              href={'/notifications/' + this.state.username}\n              primary={true} style={style} onClick={(event) => this.handleClick(event)}/>\n           </div>\n         </MuiThemeProvider>\n      </div>\n    );\n  }\n\n}\n\nexport default Login;\n","import 'react-notifications-component/dist/theme.css';\n\nimport React, { Component, style,}  from \"react\";\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport AppBar from 'material-ui/AppBar';\nimport Toast from 'react-bootstrap/Toast';\nimport RaisedButton from 'material-ui/RaisedButton';\nimport TextField from 'material-ui/TextField';\nimport { Row, Col} from 'react-bootstrap';\nimport io from \"socket.io-client\";\n\nclass Notifications extends Component {\n\nconstructor(props) {\n  super(props);\n\n  this.state = {\n      notifications: {},\n      notifier: {message: \"\", room : \"\"},\n  };\n  this.add_notif=this.add_notif.bind(this);\n  this.notify=this.notify.bind(this);\n  const socket = io.connect('localhost:8080');\n  socket.emit(\"join\", this.props.match.params.room);\n  socket.on(\"notification\", this.add_notif);\n}\n\nremove_notif(notif) {\n  var notifications = {...this.state.notifications}\n  notifications[notif] = false;\n  this.setState({notifications})\n\n  }\n\nnotify() {\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ message : this.state.notifier.message })\n    };\n    fetch('http://localhost:8080/notify/' + this.state.notifier.room, requestOptions)\n}\n\nadd_notif(notif) {\n  var notifications = {\n    ...this.state.notifications,\n  [notif] : true}\n  this.setState({notifications})\n  }\n\nrefresh_message(newmessage){\n    var notifier = {\n      ...this.state.notifier,\n    message : newmessage}\n    this.setState({notifier})\n}\n\nrefresh_room(newroom){\n    var notifier = {\n      ...this.state.notifier,\n    room : newroom}\n    this.setState({notifier})\n}\n\nrender() {\n    return (\n      <div>\n        <MuiThemeProvider>\n          <div>\n            <AppBar\n               title={\"Notifications for \" + this.props.match.params.room}\n             />\n \t\t  </div>\n\n    <Col>\n        <TextField\n          hintText=\"Enter Room Name\"\n          floatingLabelText=\"Room Name\"\n          onChange = {(event,newValue) => this.refresh_room(newValue)}\n          />\n        <TextField\n            hintText=\"Enter message\"\n            floatingLabelText=\"Message\"\n            onChange = {(event,newValue) => this.refresh_message(newValue)}\n        />\n          <RaisedButton label=\"Notify\"\n         primary={true} style={style} onClick={this.notify}/>\n    </Col>\n\n    <Col>\n      {\n        Object.keys(this.state.notifications).map(notification => (\n      <Row value={notification}>\n        <Toast onClose={() => {\n          this.remove_notif(notification);\n          }\n        }\n        show={this.state.notifications[notification]} animation={true}>\n          <Toast.Header>\n            <img\n              src=\"\"\n              className=\"rounded mr-2\"\n              alt=\"\"\n            />\n            <strong className=\"mr-auto\">ðŸš¨TODO</strong>\n          </Toast.Header>\n          <Toast.Body >{notification}</Toast.Body>\n        </Toast>\n      </Row>\n     ))\n    }\n    </Col>\n    </MuiThemeProvider>\n    </div>\n\n\n    );\n  }\n\n}\n\nexport default Notifications;\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Switch, Route, } from 'react-router-dom';\nimport Login from './Login';\nimport Notifications from './Notifications';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nclass App extends Component {\n  render() {\n    return (\n    <Router>\n        <div>\n          <Switch>\n              <Route exact path='/' component={Login} />\n              <Route path='/notifications/:room' component={Notifications}/>\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render((\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n), document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}